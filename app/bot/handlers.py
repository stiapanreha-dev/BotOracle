from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
import uuid

from app.database.models import UserModel, SubscriptionModel, QuestionModel, DailyMessageModel, PaymentModel
from app.utils.gpt import get_gpt_response
from app.utils.robokassa import generate_payment_url
from app.config import config
import logging

logger = logging.getLogger(__name__)
router = Router()

# Texts
WELCOME_TEXT = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.

üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:** –æ–¥–Ω–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
üíé **–ü–æ –ø–æ–¥–ø–∏—Å–∫–µ:** –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

NO_SUBSCRIPTION_TEXT = """
üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.

–û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë ‚Äî –∏ —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—à–µ–º—É –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É!
"""

@router.message(Command("start"))
async def start_handler(message: types.Message):
    user = await UserModel.get_or_create_user(
        message.from_user.id,
        message.from_user.username
    )

    await UserModel.update_last_seen(user['id'])

    kb = InlineKeyboardBuilder()
    kb.button(text="üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è", callback_data="daily")
    kb.button(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask")
    kb.button(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")
    kb.button(text="‚ÑπÔ∏è FAQ", callback_data="faq")
    kb.adjust(2)

    await message.answer(WELCOME_TEXT, reply_markup=kb.as_markup(), parse_mode="Markdown")

@router.message(Command("subscribe"))
async def subscribe_command(message: types.Message):
    logger.info(f"Subscribe command received from user {message.from_user.id}")
    user = await UserModel.get_or_create_user(
        message.from_user.id,
        message.from_user.username
    )

    subscription = await SubscriptionModel.get_active_subscription(user['id'])

    if subscription:
        end_date = subscription['ends_at'].strftime("%d.%m.%Y %H:%M")
        text = f"‚úÖ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:** {end_date}\n\n"
        text += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    else:
        text = "üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
        text += f"üìÖ **–ù–µ–¥–µ–ª—è** ‚Äî {config.WEEK_PRICE} ‚ÇΩ\n"
        text += f"üìÜ **–ú–µ—Å—è—Ü** ‚Äî {config.MONTH_PRICE} ‚ÇΩ\n\n"
        text += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"

    kb = InlineKeyboardBuilder()
    kb.button(text=f"üìÖ –ù–µ–¥–µ–ª—è ‚Äî {config.WEEK_PRICE} ‚ÇΩ", callback_data="pay_week")
    kb.button(text=f"üìÜ –ú–µ—Å—è—Ü ‚Äî {config.MONTH_PRICE} ‚ÇΩ", callback_data="pay_month")
    kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
    kb.adjust(1)

    await message.answer(text, reply_markup=kb.as_markup(), parse_mode="Markdown")

@router.callback_query(F.data == "daily")
async def daily_message_handler(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback {callback.id}: {e}")
    logger.info(f"Daily message callback: {callback.data}")

    user = await UserModel.get_or_create_user(
        callback.from_user.id,
        callback.from_user.username
    )

    # Check if already sent today
    if await DailyMessageModel.is_sent_today(user['id']):
        await callback.message.answer("üì® –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º.")
        return

    # Get random message
    daily_msg = await DailyMessageModel.get_random_message()
    if not daily_msg:
        await callback.message.answer("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    # Send message and mark as sent
    await callback.message.answer(f"üì® **–°–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è:**\n\n{daily_msg['text']}", parse_mode="Markdown")
    await DailyMessageModel.mark_sent(user['id'], daily_msg['id'])

    # Return to main menu
    kb = InlineKeyboardBuilder()
    kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
    await callback.message.answer("–ß—Ç–æ –µ—â–µ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb.as_markup())

@router.callback_query(F.data == "ask")
async def ask_question_handler(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback {callback.id}: {e}")

    user = await UserModel.get_or_create_user(
        callback.from_user.id,
        callback.from_user.username
    )

    # Check subscription
    subscription = await SubscriptionModel.get_active_subscription(user['id'])

    if subscription:
        # Check daily limit
        today_questions = await QuestionModel.count_today_questions(user['id'])
        if today_questions >= config.QUESTIONS_PER_DAY:
            await callback.message.answer(
                f"üìä –í—ã —É–∂–µ –∑–∞–¥–∞–ª–∏ {config.QUESTIONS_PER_DAY} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è. "
                "–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!"
            )
            return

        await callback.message.answer(
            f"üí¨ –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–æ—Å—Ç–∞–ª–æ—Å—å {config.QUESTIONS_PER_DAY - today_questions} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è).\n\n"
            "–Ø –æ—Ç–≤–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥."
        )

    elif user['free_questions_left'] > 0:
        await callback.message.answer(
            f"üí¨ –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
            f"üìä –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user['free_questions_left']} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        )

    else:
        kb = InlineKeyboardBuilder()
        kb.button(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")
        kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
        kb.adjust(1)

        await callback.message.answer(
            NO_SUBSCRIPTION_TEXT,
            reply_markup=kb.as_markup()
        )

@router.callback_query(F.data == "subscription")
async def subscription_handler(callback: types.CallbackQuery):
    logger.info(f"Subscription callback received from user {callback.from_user.id}")
    try:
        await callback.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback {callback.id}: {e}")
        # Continue processing even if answer fails

    user = await UserModel.get_or_create_user(
        callback.from_user.id,
        callback.from_user.username
    )

    subscription = await SubscriptionModel.get_active_subscription(user['id'])

    if subscription:
        end_date = subscription['ends_at'].strftime("%d.%m.%Y %H:%M")
        text = f"‚úÖ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:** {end_date}\n\n"
        text += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    else:
        text = "üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
        text += f"üìÖ **–ù–µ–¥–µ–ª—è** ‚Äî {config.WEEK_PRICE} ‚ÇΩ\n"
        text += f"üìÜ **–ú–µ—Å—è—Ü** ‚Äî {config.MONTH_PRICE} ‚ÇΩ\n\n"
        text += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"

    kb = InlineKeyboardBuilder()
    kb.button(text=f"üìÖ –ù–µ–¥–µ–ª—è ‚Äî {config.WEEK_PRICE} ‚ÇΩ", callback_data="pay_week")
    kb.button(text=f"üìÜ –ú–µ—Å—è—Ü ‚Äî {config.MONTH_PRICE} ‚ÇΩ", callback_data="pay_month")
    kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
    kb.adjust(1)

    await callback.message.answer(text, reply_markup=kb.as_markup(), parse_mode="Markdown")

@router.callback_query(F.data.startswith("pay_"))
async def payment_handler(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback {callback.id}: {e}")
    logger.info(f"Payment handler called for callback: {callback.data} from user {callback.from_user.id}")

    plan = callback.data.split("_")[1]  # week or month

    user = await UserModel.get_or_create_user(
        callback.from_user.id,
        callback.from_user.username
    )

    # Generate payment
    amount = config.WEEK_PRICE if plan == "week" else config.MONTH_PRICE
    plan_code = "WEEK" if plan == "week" else "MONTH"
    # Generate unique numeric invoice ID for Robokassa (must be 1-2147483647)
    inv_id = int(datetime.now().timestamp())

    # Create payment record in database
    await PaymentModel.create_payment(user['id'], inv_id, plan_code, amount)

    # Avoid special characters in description for Robokassa
    username = callback.from_user.username or str(callback.from_user.id)
    # Remove @ symbol and use only safe characters
    username = username.replace('@', '').replace(' ', '')
    description = f"Subscription {plan} for user {username}"

    payment_url = generate_payment_url(amount, inv_id, description)

    kb = InlineKeyboardBuilder()
    kb.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
    kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
    kb.adjust(1)

    period = "–Ω–µ–¥–µ–ª—é" if plan == "week" else "–º–µ—Å—è—Ü"
    text = f"üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period}**\n\n"
    text += f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
    text += f"üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `{inv_id}`\n\n"
    text += "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."

    await callback.message.answer(text, reply_markup=kb.as_markup(), parse_mode="Markdown")

@router.callback_query(F.data == "faq")
async def faq_handler(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback {callback.id}: {e}")

    text = """
‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**

**–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è¬ª?**
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É –∏–ª–∏ —Å–æ–≤–µ—Ç ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã?**
–í—ã –∑–∞–¥–∞–µ—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∞ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.

**–°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å?**
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –ü–æ –ø–æ–¥–ø–∏—Å–∫–µ: 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å

**–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?**
–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ ‚Üí –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Robokassa.

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã?**
–ü–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º!
"""

    kb = InlineKeyboardBuilder()
    kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")

    await callback.message.answer(text, reply_markup=kb.as_markup(), parse_mode="Markdown")

@router.callback_query(F.data == "menu")
async def menu_handler(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback {callback.id}: {e}")
    await start_handler(callback.message)

@router.callback_query()
async def debug_callback_handler(callback: types.CallbackQuery):
    logger.info(f"Unhandled callback received: {callback.data} from user {callback.from_user.id}")
    try:
        await callback.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback {callback.id}: {e}")

@router.message(lambda message: not message.text or not message.text.startswith('/'))
async def question_handler(message: types.Message):
    if not message.text:
        return
    logger.info(f"Question handler received message: {message.text} from user {message.from_user.id}")

    user = await UserModel.get_or_create_user(
        message.from_user.id,
        message.from_user.username
    )

    await UserModel.update_last_seen(user['id'])

    # Check subscription first
    subscription = await SubscriptionModel.get_active_subscription(user['id'])
    can_ask = False

    if subscription:
        # Check daily limit
        today_questions = await QuestionModel.count_today_questions(user['id'])
        if today_questions < config.QUESTIONS_PER_DAY:
            can_ask = True
        else:
            await message.answer(
                f"üìä –í—ã —É–∂–µ –∑–∞–¥–∞–ª–∏ {config.QUESTIONS_PER_DAY} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è. "
                "–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!"
            )
            return
    elif user['free_questions_left'] > 0:
        can_ask = True
    else:
        kb = InlineKeyboardBuilder()
        kb.button(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")

        await message.answer(
            "üîí –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=kb.as_markup()
        )
        return

    if can_ask:
        # Send "thinking" message
        thinking_msg = await message.answer("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

        # Get GPT response
        answer, tokens = await get_gpt_response(message.text)

        # Delete thinking message
        await thinking_msg.delete()

        # Send answer
        await message.answer(f"üí° **–û—Ç–≤–µ—Ç:**\n\n{answer}", parse_mode="Markdown")

        # Save question
        await QuestionModel.save_question(user['id'], message.text, answer, tokens)

        # Update counters
        if not subscription:
            await UserModel.use_free_question(user['id'])
            remaining = user['free_questions_left'] - 1
            if remaining > 0:
                await message.answer(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining}")
            else:
                kb = InlineKeyboardBuilder()
                kb.button(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")
                await message.answer(
                    "üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                    reply_markup=kb.as_markup()
                )
        else:
            remaining_today = config.QUESTIONS_PER_DAY - await QuestionModel.count_today_questions(user['id'])
            if remaining_today > 0:
                await message.answer(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_today}")

def setup_handlers(dp):
    dp.include_router(router)