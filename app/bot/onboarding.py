"""
Onboarding handlers for Bot Oracle
Handles user questionnaire: age and gender for personalization
"""
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import logging

from app.bot.states import OnboardingStates
from app.database.models import UserModel
from app.services.persona import persona_factory, get_admin_response

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == "/start")
async def start_command(message: types.Message, state: FSMContext):
    """Start command - begin onboarding questionnaire"""
    try:
        # Get or create user
        user = await UserModel.get_or_create_user(
            message.from_user.id,
            message.from_user.username
        )

        # Check if user already completed onboarding
        if user.get('age') and user.get('gender'):
            # User already onboarded, show welcome back message
            persona = persona_factory(user)
            await message.answer(
                persona.wrap("—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üåü —è –ø–æ–º–Ω—é —Ç–µ–±—è. —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?")
            )

            # Check subscription and send appropriate main menu
            from app.bot.keyboards import get_main_menu
            from app.database.models import SubscriptionModel
            subscription = await SubscriptionModel.get_active_subscription(user['id'])
            has_subscription = subscription is not None

            await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(has_subscription))

            await state.clear()
            return

        # Start onboarding questionnaire
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Bot Oracle ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "–ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è –±—ã–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n\n"
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ)"
        )
        await state.set_state(OnboardingStates.waiting_for_age)

    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(OnboardingStates.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    """Process user age input"""
    try:
        # Validate age input
        try:
            age = int(message.text.strip())
            if age < 10 or age > 120:
                await message.answer(
                    "ü§î –ö–∞–∂–µ—Ç—Å—è, –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 120 –ª–µ—Ç.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:"
                )
                return
        except ValueError:
            await message.answer(
                "ü§î –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ (–≤–æ–∑—Ä–∞—Å—Ç).\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
            )
            return

        # Save age to state
        await state.update_data(age=age)

        # Ask for gender
        gender_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞"), KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")],
                [KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! üëç\n\n"
            "–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Ç—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?\n"
            "(—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ç–æ–Ω–µ)",
            reply_markup=gender_keyboard
        )
        await state.set_state(OnboardingStates.waiting_for_gender)

    except Exception as e:
        logger.error(f"Error processing age: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(OnboardingStates.waiting_for_gender)
async def process_gender(message: types.Message, state: FSMContext):
    """Process user gender input"""
    try:
        gender_text = message.text.strip().lower()

        # Map gender input
        if gender_text in ["–º—É–∂—á–∏–Ω–∞", "–º—É–∂", "–º", "–º–∞–ª—å—á–∏–∫"]:
            gender = "male"
        elif gender_text in ["–∂–µ–Ω—â–∏–Ω–∞", "–∂–µ–Ω", "–∂", "–¥–µ–≤–æ—á–∫–∞", "–¥–µ–≤—É—à–∫–∞"]:
            gender = "female"
        elif gender_text in ["–¥—Ä—É–≥–æ–µ", "–Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ"]:
            gender = "other"
        else:
            await message.answer(
                "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞"), KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")],
                        [KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
                    ],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            return

        # Get age from state
        data = await state.get_data()
        age = data.get('age')

        # Update user profile in database
        await UserModel.update_profile(message.from_user.id, age, gender)

        # Get updated user data and create persona
        user = await UserModel.get_by_tg_id(message.from_user.id)
        persona = persona_factory(user)

        # Complete onboarding
        welcome_text = get_admin_response("welcome_new", persona)

        await message.answer(
            f"{welcome_text}\n\n"
            "üéÅ –ß—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è:\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∂–º–∏ ¬´–°–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è¬ª)\n"
            "‚Ä¢ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º—É–¥—Ä–æ–º—É –û—Ä–∞–∫—É–ª—É (–ø–æ –ø–æ–¥–ø–∏—Å–∫–µ)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—É—á–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚ú®",
            reply_markup=ReplyKeyboardRemove()
        )

        # Create main menu (new users don't have subscription)
        from app.bot.keyboards import get_main_menu
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(has_subscription=False))

        await state.set_state(OnboardingStates.completed)

        # Initialize user preferences
        await UserModel.init_user_preferences(user['id'])

        logger.info(f"User {message.from_user.id} completed onboarding: age={age}, gender={gender}")

    except Exception as e:
        logger.error(f"Error processing gender: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# NOTE: No catch-all handler here to allow oracle_handlers to process messages
# Onboarding only handles /start and FSM states