from aiogram import types, Router
from aiogram.filters import Command
from datetime import datetime, date, timedelta
from io import BytesIO

from app.database.models import MetricsModel
from app.database.connection import db
from app.config import config
import logging

logger = logging.getLogger(__name__)
admin_router = Router()

def is_admin(user_id: int) -> bool:
    return user_id in config.ADMIN_IDS

def escape_markdown(text: str) -> str:
    """Escape markdown special characters"""
    if not text:
        return text
    return str(text).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`').replace('(', '\\(').replace(')', '\\)')

@admin_router.message(Command("admin_today"))
async def admin_today(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        today = date.today()
        metrics = await MetricsModel.calculate_daily_metrics(today)

        text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today.strftime('%d.%m.%Y')}**

üë• DAU: {metrics['dau']}
üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {metrics['new_users']}
üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {metrics['active_users']}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: {metrics['blocked_total']}
üì® –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è: {metrics['daily_sent']}
üíé –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics['paid_active']}
üÜïüíé –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics['paid_new']}
‚ùì –ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {metrics['questions']}
üí∞ –í—ã—Ä—É—á–∫–∞: {metrics['revenue']} ‚ÇΩ
"""

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin today command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@admin_router.message(Command("admin_range"))
async def admin_range(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /admin_range YYYY-MM-DD YYYY-MM-DD")
            return

        date1_str, date2_str = parts[1], parts[2]
        date1 = datetime.strptime(date1_str, '%Y-%m-%d').date()
        date2 = datetime.strptime(date2_str, '%Y-%m-%d').date()

        if date1 > date2:
            date1, date2 = date2, date1

        rows = await db.fetch(
            """
            SELECT * FROM fact_daily_metrics
            WHERE d BETWEEN $1 AND $2
            ORDER BY d
            """,
            date1, date2
        )

        if not rows:
            await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return

        # Calculate totals
        total_dau = sum(row['dau'] for row in rows)
        total_new = sum(row['new_users'] for row in rows)
        total_revenue = sum(row['revenue'] for row in rows)
        total_questions = sum(row['questions'] for row in rows)
        avg_dau = total_dau / len(rows) if rows else 0

        text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {date1_str} ‚Äî {date2_str}**

üìÖ –î–Ω–µ–π: {len(rows)}
üë• –û–±—â–∏–π DAU: {total_dau}
üìä –°—Ä–µ–¥–Ω–∏–π DAU: {avg_dau:.1f}
üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_new}
‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} ‚ÇΩ

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_export
"""

        await message.answer(text, parse_mode="Markdown")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
    except Exception as e:
        logger.error(f"Admin range command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@admin_router.message(Command("admin_export"))
async def admin_export(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /admin_export YYYY-MM-DD YYYY-MM-DD")
            return

        date1_str, date2_str = parts[1], parts[2]
        date1 = datetime.strptime(date1_str, '%Y-%m-%d').date()
        date2 = datetime.strptime(date2_str, '%Y-%m-%d').date()

        if date1 > date2:
            date1, date2 = date2, date1

        rows = await db.fetch(
            """
            SELECT * FROM fact_daily_metrics
            WHERE d BETWEEN $1 AND $2
            ORDER BY d
            """,
            date1, date2
        )

        if not rows:
            await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return

        # Create TSV content
        headers = ['date', 'dau', 'new_users', 'active_users', 'blocked_total',
                  'daily_sent', 'paid_active', 'paid_new', 'questions', 'revenue']

        tsv_lines = ['\t'.join(headers)]

        for row in rows:
            line = '\t'.join([str(row[header] if row[header] is not None else 0) for header in headers])
            tsv_lines.append(line)

        tsv_content = '\n'.join(tsv_lines)

        # Create file
        file_buffer = BytesIO(tsv_content.encode('utf-8'))
        filename = f"stats_{date1_str}_{date2_str}.tsv"

        file = types.BufferedInputFile(file_buffer.getvalue(), filename=filename)

        await message.answer_document(
            file,
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {date1_str} ‚Äî {date2_str}"
        )

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
    except Exception as e:
        logger.error(f"Admin export command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")

@admin_router.message(Command("admin_paid"))
async def admin_paid(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        rows = await db.fetch(
            """
            SELECT u.tg_user_id, u.username, s.plan_code, s.ends_at
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE s.status = 'active' AND s.ends_at > now()
            ORDER BY s.ends_at DESC
            LIMIT 50
            """
        )

        if not rows:
            await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            return

        text = "üíé **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):**\n\n"

        for row in rows:
            username = f"@{row['username']}" if row['username'] else f"ID:{row['tg_user_id']}"
            plan = row['plan_code']
            end_date = row['ends_at'].strftime('%d.%m.%Y')
            text += f"‚Ä¢ {username} ‚Äî {plan} –¥–æ {end_date}\n"

        if len(text) > 4000:
            text = text[:3900] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin paid command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

@admin_router.message(Command("admin_blocked"))
async def admin_blocked(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        rows = await db.fetch(
            """
            SELECT tg_user_id, username, blocked_at
            FROM users
            WHERE is_blocked = true
            ORDER BY blocked_at DESC
            LIMIT 50
            """
        )

        if not rows:
            await message.answer("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        text = "üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):**\n\n"

        for row in rows:
            username = f"@{row['username']}" if row['username'] else f"ID:{row['tg_user_id']}"
            blocked_date = row['blocked_at'].strftime('%d.%m.%Y') if row['blocked_at'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text += f"‚Ä¢ {username} ‚Äî {blocked_date}\n"

        if len(text) > 4000:
            text = text[:3900] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin blocked command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")

@admin_router.message(Command("admin_stats"))
async def admin_stats(message: types.Message):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        # Extract bot ID from token to exclude bot from statistics
        bot_id = int(config.BOT_TOKEN.split(':')[0]) if config.BOT_TOKEN else 0

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞)
        total_users = await db.fetchval("SELECT COUNT(*) FROM users WHERE tg_user_id != $1", bot_id)
        active_subs = await db.fetchval("SELECT COUNT(*) FROM subscriptions WHERE status = 'active' AND ends_at > now()")
        total_questions = await db.fetchval("SELECT COUNT(*) FROM questions")
        blocked_users = await db.fetchval("SELECT COUNT(*) FROM users WHERE is_blocked = true AND tg_user_id != $1", bot_id)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–∏—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞)
        today = date.today()
        today_users = await db.fetchval("SELECT COUNT(*) FROM users WHERE DATE(first_seen_at) = $1 AND tg_user_id != $2", today, bot_id)
        today_questions = await db.fetchval("SELECT COUNT(*) FROM questions WHERE DATE(created_at) = $1", today)

        text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {today_users}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_users}

üíé **–ü–æ–¥–ø–∏—Å–∫–∏:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_subs}

‚ùì **–í–æ–ø—Ä–æ—Å—ã:**
‚Ä¢ –í—Å–µ–≥–æ: {total_questions}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today_questions}

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin stats error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@admin_router.message(Command("admin_users"))
async def admin_users(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(message.from_user.id):
        return

    try:
        # Extract bot ID from token to exclude bot from user list
        bot_id = int(config.BOT_TOKEN.split(':')[0]) if config.BOT_TOKEN else 0

        rows = await db.fetch(
            """
            SELECT tg_user_id, username, first_seen_at, last_seen_at, is_blocked,
                   (SELECT COUNT(*) FROM questions WHERE questions.user_id = users.id) as questions_count
            FROM users
            WHERE tg_user_id != $1
            ORDER BY first_seen_at DESC
            LIMIT 50
            """,
            bot_id
        )

        if not rows:
            await message.answer("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
            return

        text = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):**\n\n"

        for row in rows:
            username = f"@{row['username']}" if row['username'] else f"ID:{row['tg_user_id']}"
            status = "üö´" if row['is_blocked'] else "‚úÖ"
            questions = row['questions_count'] or 0
            join_date = row['first_seen_at'].strftime('%d.%m') if row['first_seen_at'] else "?"

            # Escape markdown special characters in username
            username_escaped = escape_markdown(username)
            text += f"{status} {username_escaped} ‚Äî {questions}‚ùì ‚Äî {join_date}\n"

        if len(text) > 4000:
            text = text[:3900] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin users error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@admin_router.message(Command("admin_message"))
async def admin_message(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not is_admin(message.from_user.id):
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        command_parts = message.text.split(' ', 1)
        if len(command_parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n`/admin_message –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å`", parse_mode="Markdown")
            return

        broadcast_text = command_parts[1]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await db.fetch("SELECT tg_user_id FROM users WHERE is_blocked = false")

        if not users:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_count = 0
        failed_count = 0

        await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        for user in users:
            try:
                await message.bot.send_message(user['tg_user_id'], broadcast_text)
                sent_count += 1
            except Exception:
                failed_count += 1

        await message.answer(f"""‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚Ä¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}""")

    except Exception as e:
        logger.error(f"Admin message error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")

@admin_router.message(Command("admin_block"))
async def admin_block_user(message: types.Message):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        return

    try:
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n`/admin_block 123456789`", parse_mode="Markdown")
            return

        try:
            target_user_id = int(command_parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.fetchrow("SELECT id, username FROM users WHERE tg_user_id = $1", target_user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            "UPDATE users SET is_blocked = true, blocked_at = now() WHERE tg_user_id = $1",
            target_user_id
        )

        username = f"@{user['username']}" if user['username'] else f"ID:{target_user_id}"
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin block error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@admin_router.message(Command("admin_unblock"))
async def admin_unblock_user(message: types.Message):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        return

    try:
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n`/admin_unblock 123456789`", parse_mode="Markdown")
            return

        try:
            target_user_id = int(command_parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.fetchrow("SELECT id, username FROM users WHERE tg_user_id = $1", target_user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            "UPDATE users SET is_blocked = false, blocked_at = NULL WHERE tg_user_id = $1",
            target_user_id
        )

        username = f"@{user['username']}" if user['username'] else f"ID:{target_user_id}"
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape_markdown(username)} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin unblock error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@admin_router.message(Command("admin_help"))
async def admin_help(message: types.Message):
    """–ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
    if not is_admin(message.from_user.id):
        return

    help_text = """üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ `/admin_stats` ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ `/admin_today` ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ `/admin_range YYYY-MM-DD YYYY-MM-DD` ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
‚Ä¢ `/admin_export` ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ `/admin_users` ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
‚Ä¢ `/admin_paid` ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
‚Ä¢ `/admin_blocked` ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üõ†Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/admin_message <—Ç–µ–∫—Å—Ç>` ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ `/admin_block <user_id>` ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/admin_unblock <user_id>` ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ `/admin_help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"""

    await message.answer(help_text, parse_mode="Markdown")

def setup_admin_handlers(dp):
    dp.include_router(admin_router)